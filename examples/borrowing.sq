
/***************************************************************************
 * Some different borrowing tests, some should work and others that
 * yields a fatal error. The borrow checker should catch all these errors.
 ***************************************************************************/

fn inc(x: &mut i32) {
    *x = *x + 1;
}

fn test_references_1() {
    let mut a: i32 = 10;
    let b: &i32 = &a;
    let c: &i32 = (&a);
    inc(&mut a);
}

fn test_references_2() {
    let mut a: i32 = 10;
    inc(&mut a);
    let b: &i32 = &a;
}

fn test_references_3() {
    let mut a: i32 = 10;
    let b: &mut i32 = &mut a;
    let c: &mut i32 = (&mut a);
}

fn test_returning_reference() -> &i32 {
    let a: i32 = 10;
    &a
}

fn test_reference_out_of_scope() {
    let mut a: &i32 = &0;
    {
        let b: i32 = 5;
        a = &b;
    }
    print_int(*a);
}

fn test_mutate_while_borrow() {
    let mut a: i32 = 5;
    let b: &i32 = &a;
    a = a + 5;
    print_int(*b);
}
