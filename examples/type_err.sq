
/***************************************************************************
 * Type error - Simple program to show different type errors that are
 * caught by the type checker.
 ***************************************************************************/


/**
 * Returns incorrect type.
 * Should emit error diagnostic.
 */
fn incorrect_return() -> i32 {

    
    return false;
}


/**
 * Function missing return
 * Should emit error diagnostic.
 */
fn missing_return() -> bool {
    
}


/**
 * Function returns nothing when it should.
 * Should emit different error message than above.
 */
fn void_return() -> i32 {
    return;
}


/**
 * Returning something in an inner block scope.
 * Should pass.
 */
fn nested_block_return() -> i32 {
    {
        { return 53; }
    }
}


/**
 * Binding a variable with wrong initial value.
 * Should emit 2 error diagnostics.
 */
fn let_bindings() {
    let a: i32 = false;
    let b: bool = 5;
}

/**
 * Similar to the above function except the value is initialised later.
 * Should emit 2 error diagnostics.
 */
fn let_uninitialized() {
    let a: i32;
    let b: bool;
    a = false;
    b = 5;
}


fn if_statements() {
    let a: i32 = if true {
        43
    } else {
        false
    };
}
